/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tiba;

import java.awt.HeadlessException;
import java.sql.*;
import java.util.Calendar;
import java.util.concurrent.ThreadLocalRandom;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;

/**
 *
 * @author Vanessa
 */
public class AdminStaffData extends javax.swing.JFrame {
 
    /**
     * Creates new form AdminReception
     */
    
    public static String text;
    public String url = Tiba.mysqlurl;
    public String pwd = Tiba.mysqlpwd;
    
    public String gender;
    
    ResultSet rs;

    public String receptionist = "receptionist", doctor = "doctor", lab = "lab assistant", pharmacist = "phamarcist";
    
    ButtonGroup bg = new ButtonGroup();
        
    public AdminStaffData() {

        initComponents();
        
        randomID();
        rBtnChoices();
        staffType();
        textDisplay();
        jStartDate();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        adminStaffTypelbl = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        userIDTextField = new javax.swing.JTextField();
        fnameTextField = new javax.swing.JTextField();
        mnameTextField = new javax.swing.JTextField();
        lnamejTextField = new javax.swing.JTextField();
        positionTextField = new javax.swing.JTextField();
        addressJTextField = new javax.swing.JTextField();
        telephoneTextField = new javax.swing.JTextField();
        emailTextField = new javax.swing.JTextField();
        maleRadioButton = new javax.swing.JRadioButton();
        femaleRadioButton = new javax.swing.JRadioButton();
        jstartFormattedTextField = new javax.swing.JFormattedTextField();
        passPasswordField = new javax.swing.JPasswordField();
        registerButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        dobjTextField1 = new javax.swing.JTextField();
        stopjTextField2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 102, 102), new java.awt.Color(0, 51, 51)));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 102));
        jLabel2.setText("T I B A - H M S ");

        searchTextField.setText("search");
        searchTextField.setCaretColor(new java.awt.Color(0, 102, 102));
        searchTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchTextFieldMouseClicked(evt);
            }
        });
        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("ADMINISTRATOR ACC.");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 338, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(343, 343, 343))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));

        adminStaffTypelbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        adminStaffTypelbl.setText("to change");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(adminStaffTypelbl, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addComponent(adminStaffTypelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        userIDTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userIDTextFieldActionPerformed(evt);
            }
        });

        fnameTextField.setText("First Name");
        fnameTextField.setToolTipText("first name");
        fnameTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fnameTextFieldMouseClicked(evt);
            }
        });

        mnameTextField.setText("Middle Name");
        mnameTextField.setToolTipText("middle name");
        mnameTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mnameTextFieldMouseClicked(evt);
            }
        });

        lnamejTextField.setText("Last Name");
        lnamejTextField.setToolTipText("last name");
        lnamejTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lnamejTextFieldMouseClicked(evt);
            }
        });

        positionTextField.setEditable(false);
        positionTextField.setToolTipText("work position");
        positionTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                positionTextFieldMouseClicked(evt);
            }
        });

        addressJTextField.setText("Address");
        addressJTextField.setToolTipText("street address");
        addressJTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addressJTextFieldMouseClicked(evt);
            }
        });

        telephoneTextField.setText("Telephone");
        telephoneTextField.setToolTipText("phone number");
        telephoneTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                telephoneTextFieldMouseClicked(evt);
            }
        });

        emailTextField.setText("Email");
        emailTextField.setToolTipText("email");
        emailTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                emailTextFieldMouseClicked(evt);
            }
        });

        maleRadioButton.setText("Male");

        femaleRadioButton.setText("Female");

        jstartFormattedTextField.setEditable(false);
        jstartFormattedTextField.setToolTipText("Job Commencement");
        jstartFormattedTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jstartFormattedTextFieldMouseClicked(evt);
            }
        });

        passPasswordField.setText("jPasswordField1");
        passPasswordField.setToolTipText("your password(secret)");
        passPasswordField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                passPasswordFieldMouseClicked(evt);
            }
        });

        registerButton.setText("REGISTER");
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        updateButton.setText("UPDATE");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("DELETE");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        exitButton.setText("EXIT");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        dobjTextField1.setText("dob(yy-mm-dd)");
        dobjTextField1.setToolTipText("date dof birth");
        dobjTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dobjTextField1MouseClicked(evt);
            }
        });

        stopjTextField2.setText("start(yy-mm-dd)");
        stopjTextField2.setToolTipText("date dof birth");
        stopjTextField2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopjTextField2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lnamejTextField)
                            .addComponent(mnameTextField)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(maleRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(femaleRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(dobjTextField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(110, 110, 110)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(addressJTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(positionTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jstartFormattedTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(stopjTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(110, 110, 110)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(telephoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(registerButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passPasswordField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(telephoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addressJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(registerButton))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lnamejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jstartFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateButton))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteButton)
                    .addComponent(dobjTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stopjTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(positionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maleRadioButton)
                    .addComponent(femaleRadioButton)
                    .addComponent(exitButton))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        // TODO add your handling code here:
        
        if (maleRadioButton.isSelected()) {
//            maleRadioButton.setSelected(true);
//            femaleRadioButton.setSelected(false);
            gender = "male";
        } else if (femaleRadioButton.isSelected()) {
//            femaleRadioButton.setSelected(true);
//            maleRadioButton.setSelected(false);
            gender = "female";
        }
        
        if ( text == "RECEPTIONIST") {
            
            if (userIDTextField.getText().isEmpty() || fnameTextField.getText().isEmpty() || lnamejTextField.getText().isEmpty() || 
                    dobjTextField1.getText().isEmpty() || bg.getSelection()== null || telephoneTextField.getText().isEmpty() ||
                    jstartFormattedTextField.getText().isEmpty() || positionTextField.getText().isEmpty() || passPasswordField.getText().isEmpty()) {
                
                JOptionPane.showMessageDialog(null, "Kindly fill the empty fields!");
                
            } else {
                
                try {
                    Connection conn = DriverManager.getConnection(url, "root", pwd);
                    String query = "INSERT INTO reception (receptionid, fname, mname, lname, dob, gender, email, telephone, address, jobstart, jobstop, position, password)" 
                            + "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                    PreparedStatement ps = conn.prepareStatement(query);
                    ps.setString(1, userIDTextField.getText());
                    ps.setString(2, fnameTextField.getText());
                    ps.setString(3, mnameTextField.getText());
                    ps.setString(4, lnamejTextField.getText());
                    ps.setString(5, dobjTextField1.getText());
//                    ps.setString(5, String.valueOf(dobDatePicker.getDate()));
                    ps.setString(6, gender);
                    ps.setString(7, emailTextField.getText());
                    ps.setString(8, telephoneTextField.getText());
                    ps.setString(9, addressJTextField.getText());
                    ps.setString(10, jstartFormattedTextField.getText());
                    ps.setString(11, stopjTextField2.getText());
//                    ps.setString(11, jobstopDatePicker.getDate().toString());
                    ps.setString(12, positionTextField.getText());
                    ps.setString(13, passPasswordField.getPassword().toString());

                    ps.executeUpdate();
                    
                    randomID();

                    JOptionPane.showMessageDialog(null, "NEW RECEPTIONIST ADDED");
                    

                } catch (SQLException | HeadlessException e) {
                    JOptionPane.showMessageDialog(null, e + " USER DOESN'T EXIST!");
                }
            }
            
        } else if (text == "DOCTOR") {
            
            positionTextField.setText(doctor);
            
            if (userIDTextField.getText().isEmpty() || fnameTextField.getText().isEmpty() || lnamejTextField.getText().isEmpty() || 
                    dobjTextField1.getText().isEmpty() || bg.getSelection()== null || telephoneTextField.getText().isEmpty() ||
                    jstartFormattedTextField.getText().isEmpty() || positionTextField.getText().isEmpty() || passPasswordField.getText().isEmpty()) {
                
                JOptionPane.showMessageDialog(null, "Kindly fill the empty fields!");
                
            } else {
                try {
                    Connection conn = DriverManager.getConnection(url, "root", pwd);
                    String query = "INSERT INTO doctor (doctorid, fname, mname, lname, dob, gender, email, telephone, address, jobstart, jobstop, position, password)" 
                        + "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                    PreparedStatement ps = conn.prepareStatement(query);
                    ps.setString(1, userIDTextField.getText());
                    ps.setString(2, fnameTextField.getText());
                    ps.setString(3, mnameTextField.getText());
                    ps.setString(4, lnamejTextField.getText());
                    ps.setString(5, dobjTextField1.getText());
//                    ps.setString(5, dobDatePicker.getDate().toString());
                    ps.setString(6, gender);
                    ps.setString(7, emailTextField.getText());
                    ps.setString(8, telephoneTextField.getText());
                    ps.setString(9, addressJTextField.getText());
                    ps.setString(10, jstartFormattedTextField.getText());
                    ps.setString(11, stopjTextField2.getText());
                    ps.setString(12, positionTextField.getText());
                    ps.setString(13, passPasswordField.getPassword().toString());
                
                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "NEW DOCTOR: "+userIDTextField.getText()+ " ADDED");
                    randomID();
                        
                } catch (SQLException | HeadlessException e) {
                    JOptionPane.showMessageDialog(null, e + " USER DOESN'T EXIST!");           
                }
            }
            
        } else if (text == "LAB") {
            
            if (userIDTextField.getText().isEmpty() || fnameTextField.getText().isEmpty() || lnamejTextField.getText().isEmpty() || 
                    dobjTextField1.getText().isEmpty() || bg.getSelection()== null || telephoneTextField.getText().isEmpty() ||
                    jstartFormattedTextField.getText().isEmpty() || positionTextField.getText().isEmpty() || passPasswordField.getText().isEmpty()) {
                
                JOptionPane.showMessageDialog(null, "Kindly fill the empty fields!");
                
            } else {
                try {
                
                    Connection conn = DriverManager.getConnection(url, "root", pwd);
                    String query = "INSERT INTO lab (labid, fname, mname, lname, dob, gender, email, telephone, address, jobstart, jobstop, position, password)" 
                            + "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                    PreparedStatement ps = conn.prepareStatement(query);
                    ps.setString(1, userIDTextField.getText());
                    ps.setString(2, fnameTextField.getText());
                    ps.setString(3, mnameTextField.getText());
                    ps.setString(4, lnamejTextField.getText());
                    ps.setString(5, dobjTextField1.getText());
//                    ps.setString(5, dobDatePicker.getDate().toString());
                    ps.setString(6, gender);
                    ps.setString(7, emailTextField.getText());
                    ps.setString(8, telephoneTextField.getText());
                    ps.setString(9, addressJTextField.getText());
                    ps.setString(10, jstartFormattedTextField.getText());
                    ps.setString(11, stopjTextField2.getText());
                    ps.setString(12, positionTextField.getText());
                    ps.setString(13, passPasswordField.getPassword().toString());

                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "NEW LAB TECH ADDED");
                    randomID();
                        
                } catch (SQLException | HeadlessException e) {
                    JOptionPane.showMessageDialog(null, e + " USER DOESN'T EXIST!");
                }
            }
            
        } else if (text == "PHARMACY") {
            
            positionTextField.setText(pharmacist);
            
            if (userIDTextField.getText().isEmpty() || fnameTextField.getText().isEmpty() || lnamejTextField.getText().isEmpty() || 
                    dobjTextField1.getText().isEmpty() || bg.getSelection()== null || telephoneTextField.getText().isEmpty() ||
                    jstartFormattedTextField.getText().isEmpty() || positionTextField.getText().isEmpty() || passPasswordField.getText().isEmpty()) {
                
                JOptionPane.showMessageDialog(null, "Kindly fill the empty fields!");
                
            } else {
                
                try {
                
                    Connection conn = DriverManager.getConnection(url, "root", pwd);
                    String query = "INSERT INTO pharmacy (pharmacyid, fname, mname, lname, dob, gender, email, telephone, address, jobstart, jobstop, position, password)" 
                            + "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                    PreparedStatement ps = conn.prepareStatement(query);
                    ps.setString(1, userIDTextField.getText());
                    ps.setString(2, fnameTextField.getText());
                    ps.setString(3, mnameTextField.getText());
                    ps.setString(4, lnamejTextField.getText());
                    ps.setString(5, dobjTextField1.getText());
//                    ps.setString(5, dobDatePicker.getDate().toString());
                    ps.setString(6, gender);
                    ps.setString(7, emailTextField.getText());
                    ps.setString(8, telephoneTextField.getText());
                    ps.setString(9, addressJTextField.getText());
                    ps.setString(10, jstartFormattedTextField.getText());
                    ps.setString(11, stopjTextField2.getText());
                    ps.setString(12, positionTextField.getText());
                    ps.setString(13, passPasswordField.getPassword().toString());

                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "NEW PHARMACIST ADDED");
                    randomID();
                } catch (SQLException | HeadlessException e) {
                    JOptionPane.showMessageDialog(null, e + " USER DOESN'T EXIST!");
                }
            }
            
        } 
    }//GEN-LAST:event_registerButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        if (maleRadioButton.isSelected()) {
//            maleRadioButton.setSelected(true);
//            femaleRadioButton.setSelected(false);
            gender = "male";
        } else if (femaleRadioButton.isSelected()) {
//            femaleRadioButton.setSelected(true);
//            maleRadioButton.setSelected(false);
            gender = "female";
        }
        
        if ( text == "RECEPTIONIST") {
            try {
            
                Connection conn = DriverManager.getConnection(url, "root", pwd);
                String query = "UPDATE reception SET fname=?, mname=?, lname=?, dob=?, gender=?, email=?, telephone=?, address=?, jobstart=?, jobstop=?, position=?, password=?";
                PreparedStatement ps = conn.prepareStatement(query);
                ps.setString(1, fnameTextField.getText());
                ps.setString(2, mnameTextField.getText());
                ps.setString(3, lnamejTextField.getText());
                ps.setString(4, dobjTextField1.getText());
                ps.setString(5, gender);
                ps.setString(6, emailTextField.getText());
                ps.setString(7, telephoneTextField.getText());
                ps.setString(8, addressJTextField.getText());
                ps.setString(9, jstartFormattedTextField.getText());
                ps.setString(10, stopjTextField2.getText());
                ps.setString(11, positionTextField.getText());
                ps.setString(12, passPasswordField.getPassword().toString());
                ps.executeUpdate();

                JOptionPane.showMessageDialog(null, userIDTextField.getText() + " RECORD UPDATED.");

            } catch (SQLException | HeadlessException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } else if (text == "DOCTOR") {
            try {
            
                Connection conn = DriverManager.getConnection(url, "root", pwd);
                String query = "UPDATE doctor SET fname=?, mname=?, lname=?, dob=?, gender=?, email=?, telephone=?, address=?, jobstart=?, jobstop=?, position=?, password=?";
                PreparedStatement ps = conn.prepareStatement(query);
                ps.setString(1, fnameTextField.getText());
                ps.setString(2, mnameTextField.getText());
                ps.setString(3, lnamejTextField.getText());
                ps.setString(4, dobjTextField1.getText());
                ps.setString(5, gender);
                ps.setString(6, emailTextField.getText());
                ps.setString(7, telephoneTextField.getText());
                ps.setString(8, addressJTextField.getText());
                ps.setString(9, jstartFormattedTextField.getText());
                ps.setString(10, stopjTextField2.getText());
                ps.setString(11, positionTextField.getText());
                ps.setString(12, passPasswordField.getPassword().toString());
                ps.executeUpdate();

                JOptionPane.showMessageDialog(null, userIDTextField.getText() + " RECORD UPDATED.");

            } catch (SQLException | HeadlessException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } else if (text == "LAB") {
            try {
            
                Connection conn = DriverManager.getConnection(url, "root", pwd);
                String query = "UPDATE lab SET fname=?, mname=?, lname=?, dob=?, gender=?, email=?, telephone=?, address=?, jobstart=?, jobstop=?, position=?, password=?";
                PreparedStatement ps = conn.prepareStatement(query);
                ps.setString(1, fnameTextField.getText());
                ps.setString(2, mnameTextField.getText());
                ps.setString(3, lnamejTextField.getText());
                ps.setString(4, dobjTextField1.getText());
                ps.setString(5, gender);
                ps.setString(6, emailTextField.getText());
                ps.setString(7, telephoneTextField.getText());
                ps.setString(8, addressJTextField.getText());
                ps.setString(9, jstartFormattedTextField.getText());
                ps.setString(10, stopjTextField2.getText());
                ps.setString(11, positionTextField.getText());
                ps.setString(12, passPasswordField.getPassword().toString());
            ps.executeUpdate();
            
            JOptionPane.showMessageDialog(null, userIDTextField.getText() + " RECORD UPDATED.");
        
        } catch (SQLException | HeadlessException e) {
            JOptionPane.showMessageDialog(null, e);
        }
        } else if (text == "PHARMACY") {
               try {
            
            Connection conn = DriverManager.getConnection(url, "root", pwd);
            String query = "UPDATE pharmacy SET fname=?, mname=?, lname=?, dob=?, gender=?, email=?, telephone=?, address=?, jobstart=?, jobstop=?, position=?, password=?";
            PreparedStatement ps = conn.prepareStatement(query);
                ps.setString(1, fnameTextField.getText());
                ps.setString(2, mnameTextField.getText());
                ps.setString(3, lnamejTextField.getText());
                ps.setString(4, dobjTextField1.getText());
                ps.setString(5, gender);
                ps.setString(6, emailTextField.getText());
                ps.setString(7, telephoneTextField.getText());
                ps.setString(8, addressJTextField.getText());
                ps.setString(9, jstartFormattedTextField.getText());
                ps.setString(10, stopjTextField2.getText());
                ps.setString(11, positionTextField.getText());
                ps.setString(12, passPasswordField.getPassword().toString());
                ps.executeUpdate();

                JOptionPane.showMessageDialog(null, userIDTextField.getText() + " RECORD UPDATED.");

            } catch (SQLException | HeadlessException e) {
                JOptionPane.showMessageDialog(null, e);
            } 
        } 
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        
        if ( text == "RECEPTIONIST") {
            int option = JOptionPane.showConfirmDialog(null, "Delete ReceptionID : " + userIDTextField.getText() + " ?", "DELETE", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            try {
                Connection conn = DriverManager.getConnection(url, "root", pwd);
                String query = "DELETE FROM reception WHERE padtientid =?";
                PreparedStatement ps = conn.prepareStatement(query);
                ps.setString(1, userIDTextField.getText());
                ps.executeUpdate();
                
                JOptionPane.showMessageDialog(null, userIDTextField.getText() + " DELETED FROM SYSTEM.");
            } catch (SQLException | HeadlessException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
        } else if (text == "DOCTOR") {
            int option = JOptionPane.showConfirmDialog(null, "Delete DoctorID : " + userIDTextField.getText() + " ?", "DELETE", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            try {
                Connection conn = DriverManager.getConnection(url, "root", pwd);
                String query = "DELETE FROM doctor WHERE doctorid =?";
                PreparedStatement ps = conn.prepareStatement(query);
                ps.setString(1, userIDTextField.getText());
                ps.executeUpdate();
                
                JOptionPane.showMessageDialog(null, userIDTextField.getText() + " DELETED FROM SYSTEM.");
            } catch (SQLException | HeadlessException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
        } else if (text == "LAB") {
            int option = JOptionPane.showConfirmDialog(null, "Delete LabID : " + userIDTextField.getText() + " ?", "DELETE", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            try {
                Connection conn = DriverManager.getConnection(url, "root", pwd);
                String query = "DELETE FROM lab WHERE labid =?";
                PreparedStatement ps = conn.prepareStatement(query);
                ps.setString(1, userIDTextField.getText());
                ps.executeUpdate();
                
                JOptionPane.showMessageDialog(null, userIDTextField.getText() + " DELETED FROM SYSTEM.");
            } catch (SQLException | HeadlessException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
        } else if (text == "PHARMACY") {
                int option = JOptionPane.showConfirmDialog(null, "Delete PharmacyID : " + userIDTextField.getText() + " ?", "DELETE", JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                try {
                    Connection conn = DriverManager.getConnection(url, "root", pwd);
                    String query = "DELETE FROM pharmacy WHERE pharmacyid =?";
                    PreparedStatement ps = conn.prepareStatement(query);
                    ps.setString(1, userIDTextField.getText());
                    ps.executeUpdate();

                    JOptionPane.showMessageDialog(null, userIDTextField.getText() + " DELETED FROM SYSTEM.");
                } catch (SQLException | HeadlessException e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            }
        } 
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
        
        new AdminHome().setVisible(true);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed
        // TODO add your handling code here:
        if ( text == "RECEPTIONIST") {
            try {
            
                Connection conn =  DriverManager.getConnection(url, "root", pwd);
                String query = "SELECT receptionid, fname, mname, lname, dob, gender, email, telephone, address, jobstart, jobstop, position FROM reception where receptionid=?";
                PreparedStatement pst = conn.prepareStatement(query);
                pst.setString(1, searchTextField.getText());
                rs = pst.executeQuery();
                while (rs.next()) { 
                    String id = rs.getString("receptionid");
                    userIDTextField.setText(id);
                    String fn = rs.getString("fname");
                    fnameTextField.setText(fn);
                    String mn = rs.getString("mname");
                    mnameTextField.setText(mn);
                    String ln = rs.getString("lname");
                    lnamejTextField.setText(ln);
                    String db = rs.getString("dob");
                    dobjTextField1.setText(db);

                    String gend = rs.getString("gender");
                    if (gend.equals("female")) {
                        maleRadioButton.setSelected(false);
                        femaleRadioButton.setSelected(true);
                    }  else {
                        maleRadioButton.setSelected(true);
                        femaleRadioButton.setSelected(false);
                    }

                    String em = rs.getString("email");
                    emailTextField.setText(em);
                    String tel = rs.getString("telephone");
                    telephoneTextField.setText(tel);
                    String ad = rs.getString("address");
                    addressJTextField.setText(ad);
                    String js = rs.getString("jobstart");
                    jstartFormattedTextField.setText(js);
                    String tp = rs.getString("jobstop");
                    stopjTextField2.setText(tp);
                    String ps = rs.getString("position");
                    positionTextField.setText(ps);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } 
        else if (text == "DOCTOR"){
            try {
            
                Connection conn =  DriverManager.getConnection(url, "root", pwd);
                String query = "SELECT doctorid, fname, mname, lname, dob, gender, email, telephone, address, jobstart, jobstop, position FROM doctor where doctorid=?";
                PreparedStatement pst = conn.prepareStatement(query);
                pst.setString(1, searchTextField.getText());
                pst.executeQuery();

                while (rs.next()) {                
                    userIDTextField.setText(rs.getString("doctorid"));
                    fnameTextField.setText(rs.getString("fname"));
                    mnameTextField.setText(rs.getString("mname"));
                    lnamejTextField.setText(rs.getString("lname"));

                    String gend = rs.getString("gender");
                    if (gend.equals("female")) {
                        maleRadioButton.setSelected(false);
                        femaleRadioButton.setSelected(true);
                    }  else {
                        maleRadioButton.setSelected(true);
                        femaleRadioButton.setSelected(false);
                    }

                    emailTextField.setText(rs.getString("email"));
                    telephoneTextField.setText(rs.getString("telephone"));
                    addressJTextField.setText(rs.getString("address"));
                    jstartFormattedTextField.setText(rs.getString("jobstart"));
                    stopjTextField2.setText(rs.getString("jobstop"));
                    positionTextField.setText(rs.getString("position"));
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } 
        else if (text == "LAB") {
            try {
                    Connection conn =  DriverManager.getConnection(url, "root", pwd);
                    String query = "SELECT labid, fname, mname, lname, dob, gender, email, telephone, address, jobstart, jobstop, position FROM lab where labid=?";
                    PreparedStatement pst = conn.prepareStatement(query);
                    pst.setString(1, searchTextField.getText());
                    pst.executeQuery();
                    while (rs.next()) {                
                        userIDTextField.setText(rs.getString("labid"));
                        fnameTextField.setText(rs.getString("fname"));
                        mnameTextField.setText(rs.getString("mname"));
                        lnamejTextField.setText(rs.getString("lname"));

                        String gend = rs.getString("gender");
                        if (gend.equals("female")) {
                            maleRadioButton.setSelected(false);
                            femaleRadioButton.setSelected(true);
                        }  else {
                            maleRadioButton.setSelected(true);
                            femaleRadioButton.setSelected(false);
                        }

                        emailTextField.setText(rs.getString("email"));
                        telephoneTextField.setText(rs.getString("telephone"));
                        addressJTextField.setText(rs.getString("address"));
                        jstartFormattedTextField.setText(rs.getString("jobstart"));
                        stopjTextField2.setText(rs.getString("jobstop"));
                        positionTextField.setText(rs.getString("position"));
                    }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
        else if (text == "PHARMACY") {
            try {
            
                Connection conn =  DriverManager.getConnection(url, "root", pwd);
                String query = "SELECT pharmacyid, fname, mname, lname, dob, gender, email, telephone, address, jobstart, jobstop, position FROM pharmacy where pharmacyid=?";
                PreparedStatement pst = conn.prepareStatement(query);
                pst.setString(1, searchTextField.getText());
                pst.executeQuery();
                while (rs.next()) {                
                    userIDTextField.setText(rs.getString("pharmacyid"));
                    fnameTextField.setText(rs.getString("fname"));
                    mnameTextField.setText(rs.getString("mname"));
                    lnamejTextField.setText(rs.getString("lname"));
                    dobjTextField1.setText(rs.getString("dob"));
    //                
                    String gend = rs.getString("gender");
                    if (gend.equals("female")) {
                        maleRadioButton.setSelected(false);
                        femaleRadioButton.setSelected(true);
                    }  else {
                        maleRadioButton.setSelected(true);
                        femaleRadioButton.setSelected(false);
                    }

                    emailTextField.setText(rs.getString("email"));
                    telephoneTextField.setText(rs.getString("telephone"));
                    addressJTextField.setText(rs.getString("address"));
                    jstartFormattedTextField.setText(rs.getString("jobstart"));
                    stopjTextField2.setText(rs.getString("jobstop"));
                    positionTextField.setText(rs.getString("position"));
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
        
    }//GEN-LAST:event_searchTextFieldActionPerformed

    private void searchTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchTextFieldMouseClicked
        // TODO add your handling code here
        searchTextField.setText("");
    }//GEN-LAST:event_searchTextFieldMouseClicked

    private void userIDTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userIDTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userIDTextFieldActionPerformed

    private void fnameTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fnameTextFieldMouseClicked
        // TODO add your handling code here:
        fnameTextField.setText("");
    }//GEN-LAST:event_fnameTextFieldMouseClicked

    private void mnameTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mnameTextFieldMouseClicked
        // TODO add your handling code here:
        mnameTextField.setText("");
    }//GEN-LAST:event_mnameTextFieldMouseClicked

    private void lnamejTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lnamejTextFieldMouseClicked
        // TODO add your handling code here:
        lnamejTextField.setText("");
    }//GEN-LAST:event_lnamejTextFieldMouseClicked

    private void emailTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_emailTextFieldMouseClicked
        // TODO add your handling code here:
        emailTextField.setText("");
    }//GEN-LAST:event_emailTextFieldMouseClicked

    private void telephoneTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_telephoneTextFieldMouseClicked
        // TODO add your handling code here:
        telephoneTextField.setText("");
    }//GEN-LAST:event_telephoneTextFieldMouseClicked

    private void addressJTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addressJTextFieldMouseClicked
        // TODO add your handling code here:
        addressJTextField.setText("");
    }//GEN-LAST:event_addressJTextFieldMouseClicked

    private void positionTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_positionTextFieldMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_positionTextFieldMouseClicked

    private void passPasswordFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_passPasswordFieldMouseClicked
        // TODO add your handling code here:
        passPasswordField.setText("");
    }//GEN-LAST:event_passPasswordFieldMouseClicked

    private void jstartFormattedTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jstartFormattedTextFieldMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jstartFormattedTextFieldMouseClicked

    private void dobjTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dobjTextField1MouseClicked
        // TODO add your handling code here:
        dobjTextField1.setText("");
    }//GEN-LAST:event_dobjTextField1MouseClicked

    private void stopjTextField2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopjTextField2MouseClicked
        // TODO add your handling code here:
        stopjTextField2.setText("");
    }//GEN-LAST:event_stopjTextField2MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        text = args[0];

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminStaffData().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressJTextField;
    private javax.swing.JLabel adminStaffTypelbl;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField dobjTextField1;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JButton exitButton;
    private javax.swing.JRadioButton femaleRadioButton;
    private javax.swing.JTextField fnameTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JFormattedTextField jstartFormattedTextField;
    private javax.swing.JTextField lnamejTextField;
    private javax.swing.JRadioButton maleRadioButton;
    private javax.swing.JTextField mnameTextField;
    private javax.swing.JPasswordField passPasswordField;
    private javax.swing.JTextField positionTextField;
    private javax.swing.JButton registerButton;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JTextField stopjTextField2;
    private javax.swing.JTextField telephoneTextField;
    private javax.swing.JButton updateButton;
    private javax.swing.JTextField userIDTextField;
    // End of variables declaration//GEN-END:variables

    private void rBtnChoices() {
        bg.add(maleRadioButton);
        bg.add(femaleRadioButton);
        
        if (maleRadioButton.isSelected()) {
//            maleRadioButton.setSelected(true);
//            femaleRadioButton.setSelected(false);
            gender = "male";
        } else if (femaleRadioButton.isSelected()) {
//            femaleRadioButton.setSelected(true);
//            maleRadioButton.setSelected(false);
            gender = "female";
        }
    }

    private void randomID() {
        int random = ThreadLocalRandom.current().nextInt(10000);
        userIDTextField.setText(String.valueOf(random));
    }

    private void staffType() {
        adminStaffTypelbl.setText(text);
    }

    private void textDisplay() {
        if (text == "RECEPTIONIST") {
            positionTextField.setText(receptionist);
        } else if(text == "DOCTOR"){
            positionTextField.setText(doctor);
        } else if(text == "LAB"){
            positionTextField.setText(lab);
        } else if(text == "PHARMACY"){
            positionTextField.setText(pharmacist);
        }
    }

    private void jStartDate() {
        Calendar calendar = Calendar.getInstance();
        Date startDate = new Date(calendar.getTime().getDate());
        jstartFormattedTextField.setText(startDate.toString());
    }
//
//    private void pickdob() {
//        SimpleDateFormat dateFormatter = new SimpleDateFormat("dd-MM-yyyy");
//        Date jdate = (Date) dobDatePicker.getDate();
//        dateFormatter.format(dobDatePicker.getDate());
//    }

    private void replaceValues() {
         fnameTextField.setText("First Name");
         mnameTextField.setText("Middle Name");
         lnamejTextField.setText("Last Name");
         maleRadioButton.setSelected(false);
         femaleRadioButton.setSelected(false);
         emailTextField.setText("Email");
         telephoneTextField.setText("Telephone");
         addressJTextField.setText("Address");
         jstartFormattedTextField.setText("yy-mm-dd");
         stopjTextField2.setText("yy-mm-dd");
    }

}
